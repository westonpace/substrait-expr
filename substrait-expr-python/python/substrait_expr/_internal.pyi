from typing import Iterable

class SubstraitType(object):
    pass

class TypeBuilder(object):
    def i8(self, nullable: bool = ...) -> SubstraitType: ...
    def i16(self, nullable: bool = ...) -> SubstraitType: ...
    def i32(self, nullable: bool = ...) -> SubstraitType: ...
    def i64(self, nullable: bool = ...) -> SubstraitType: ...
    def fp32(self, nullable: bool = ...) -> SubstraitType: ...
    def fp64(self, nullable: bool = ...) -> SubstraitType: ...
    def bool(self, nullable: bool = ...) -> SubstraitType: ...
    def string(self, nullable: bool = ...) -> SubstraitType: ...
    def binary(self, nullable: bool = ...) -> SubstraitType: ...
    def timestamp(self, nullable: bool = ...) -> SubstraitType: ...
    def timestamp_tz(self, nullable: bool = ...) -> SubstraitType: ...
    def date(self, nullable: bool = ...) -> SubstraitType: ...
    def time(self, nullable: bool = ...) -> SubstraitType: ...
    def interval_year(self, nullable: bool = ...) -> SubstraitType: ...
    def interval_day(self, nullable: bool = ...) -> SubstraitType: ...
    def uuid(self, nullable: bool = ...) -> SubstraitType: ...
    def fixed_char(self, length: int, nullable: bool = ...) -> SubstraitType: ...
    def varchar(self, length: int, nullable: bool = ...) -> SubstraitType: ...
    def fixed_binary(self, length: int, nullable: bool = ...) -> SubstraitType: ...
    def decimal(self, precision: int, scale: int, nullable: bool = ...) -> SubstraitType: ...
    def list(self, item_type: SubstraitType, nullable: bool = ...) -> SubstraitType: ...
    def map(self, key_type: SubstraitType, value_type: SubstraitType, nullable: bool = ...) -> SubstraitType: ...
    def struct_(self, types: Iterable[SubstraitType], nullable: bool = ...) -> SubstraitType: ...

class TypesOnlySchemaBuilder(object):
    def __init__(self) -> None: ...
    def types(self) -> TypeBuilder: ...

